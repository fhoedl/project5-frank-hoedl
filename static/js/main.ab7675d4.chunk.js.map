{"version":3,"sources":["Assets/noun_Rain_1518109.svg","Assets/bkgdBuilding.svg","Assets/midBuilding.svg","Assets/foreBuilding.svg","images.js","BackgroundElements.js","InputField.js","GeoLocation.js","WeatherData.js","LandingPg.js","MainPg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","iSRC","bkgdBuilding","midBuilding","foreBuilding","iCondition","iAlt","iSrc","Rain","BackgroundElements","src","alt","className","Component","InputField","handleUserInput","e","setState","userInput","target","value","handleSubmit","preventDefault","state","alert","props","searchInput","type","id","this","placeholder","onChange","onClick","Geolocation","newSearchInput","searchedFor","newLat","newLon","mapApiResult","axios","url","method","responseType","params","key","location","then","results","data","locations","latLng","lat","lng","console","log","WeatherData","search","newSearch","weatherCall","units","keys","response","daily","hourly","weather","currentTemp","temp","toFixed","currentTempFeelLIke","feels_like","currentCond","description","weatherTomorrow","weatherIn2Days","searchFor","searchReq","newLocation","MainPg","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab7675d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noun_Rain_1518109.eb81db1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/bkgdBuilding.edd1fb03.svg\";","module.exports = __webpack_public_path__ + \"static/media/midBuilding.7ea0b3a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/foreBuilding.5148a2e4.svg\";","import Rain from './Assets/noun_Rain_1518109.svg';\nimport bkgdBuilding from './Assets/bkgdBuilding.svg'\nimport midBuilding from './Assets/midBuilding.svg'\nimport foreBuilding from './Assets/foreBuilding.svg'\n\nconst images = [\n    // Background Building Elements\n    {\n        iSRC: bkgdBuilding\n    },\n    {\n        iSRC: midBuilding\n    }, \n    {\n        iSRC: foreBuilding\n    },\n    \n    // Weather Icons\n    {\n        iCondition: 'Rain',\n        iAlt: 'Rain Icon',\n        iSrc: Rain\n    },\n    {\n        iCondition: 'Cloud',\n        iAlt: 'Cloud Icon',\n        iSRC: 'Assets/noun_Cloud_1518102.svg'\n    },\n    {\n        iCondition: 'Cloud w Wind',\n        iAlt: 'Cloud with Wind Icon',\n        iSRC: 'Assets/noun_Wind_1518101_Blue.svg'\n    }\n\n]\n\nexport default images;","import React, { Component } from \"react\";\nimport images from \"./images\";\nimport './App.scss';\n\n\nclass BackgroundElements extends Component {\n\n    render(){\n        return (\n            <div>\n                <img src={images[0].iSRC} alt=\"Background Building\" className=\"bkgdElements bkgd\" />\n                <img src={images[1].iSRC} alt=\"Background Building\" className=\"bkgdElements mid\" />\n                <img src={images[2].iSRC} alt=\"Background Building\" className=\"bkgdElements fore\" />\n            </div>\n        )\n    }\n\n\n\n}\n\nexport default BackgroundElements;","import React, { Component } from \"react\";\n// import axios from 'axios';\n\nclass InputField extends Component {\n    constructor(){\n        super();\n        this.state = {\n            userInput: '',\n        }\n    }\n\n    // Get USER INPUT...\n    handleUserInput = (e) => {\n        this.setState({ userInput: e.target.value } \n    )}\n\n    // PASS USER INPUT to WeatherData.js, ERROR Handled\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.state.userInput !== ''\n            ?  this.setState({ userInput: ''}) \n            : alert(`Please enter Location`)\n        this.props.searchInput(e, this.state.userInput)\n    }\n\n    // is called in MainPg amd LandingPg\n    render(){ \n        return(\n            <form  className=\"locateWSubmit\">\n\n                <input type=\"text\" id=\"locateInput\" value={this.state.userInput} placeholder=\"New Search\" className=\"locateField\" onChange={this.handleUserInput} /> \n\n                <input onClick={this.handleSubmit} type=\"submit\" value=\"Submit\" className=\"locateField\" />\n            </form>\n        )\n    }\n\n}\n\nexport default InputField; ","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Geolocation extends Component {\n    constructor (){\n        super();\n        this.state = {\n            userInput: '', //remains blank currently\n            newSearchInput: '',\n            searchedFor: '',\n            newLat: '',\n            newLon: '',\n            mapApiResult: []\n        }\n    }\n\n    // componentDidMount(newLocation) {\n    componentDidMount() {\n        axios({\n            url: 'http://www.mapquestapi.com/geocoding/v1/address',\n            method: 'GET',\n            responseType: 'json',\n            params: {\n                key: 'srnbJxPHaOsssQrGNwDmj2K6n47ObSRq',\n                location: 'Toronto, ON'\n            }\n\n        })\n            .then((results) => {\n                this.setState({\n                    mapApiResult: results,\n                    newLat: results.data.results[0].locations[0].latLng.lat,\n                    newLon: results.data.results[0].locations[0].latLng.lng\n                })\n                console.log(this.state.mapApiResult, this.state.newLat, this.state.newLon)\n            })\n    }\n  \n\n    // React handleSubmit()\n    handleSubmit(e){\n        e.preventDefault()\n        alert('Button Click working')\n    };\n\n     render(){\n\n        return(\n            <div className=\"geoLocateLink\">\n                {/* Geo-location */}    \n                {/* <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} /> */}\n                <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} />\n            </div>            \n        )\n     }\n\n}\n\nexport default Geolocation;","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport images from \"./images\";\nimport InputField from './InputField';\nimport './App.scss';\n\n\nclass WeatherData extends Component {\n    constructor(){\n        super();\n        this.state = {\n            // from INPUT\n            newSearch: 'Toronto',\n\n            // from MAP API\n            newLat: '',\n            newLon: '',\n            mapApiResult: [],\n\n            // Weather API, required for return\n            keys: '1b5614554d2203c32690e03daee17bfb',\n            units: `metric`, //Default, OPTION to change\n\n            // storing Data to be distributed by RETURN...\n            weather: [],\n            currentTemp: [],\n            currentTempFeelLIke: [],\n            currentCond: [],\n\n            weatherTomorrow: [], // stretch goals\n            weatherIn2Days: [] // stretch goals\n        }\n        const newLocation = this.state.newSearch;\n        console.log(newLocation);\n    }\n\n    componentDidMount() {\n        // const reqLocation = this.state.newSearch;\n       this.search();\n\n    }\n        \n    search = () => {\n        // Geolocation Call\n        axios({\n            url: 'http://www.mapquestapi.com/geocoding/v1/address',\n            method: 'GET',\n            responseType: 'json',\n            params: {\n                key: 'srnbJxPHaOsssQrGNwDmj2K6n47ObSRq',\n                // location: reqLocation,\n                location: this.state.newSearch\n            }\n\n        })\n            .then((results) => {\n                this.setState({\n                    mapApiResult: results,\n                    newLat: results.data.results[0].locations[0].latLng.lat,\n                    newLon: results.data.results[0].locations[0].latLng.lng\n                })\n                console.log(this.state.mapApiResult, this.state.newLat, this.state.newLon)\n                weatherCall();\n            })\n\n        // API Weather Call... Called from within GEo Location call...\n        const weatherCall =() =>{\n            axios({\n                url: `https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.newLat}&lon=${this.state.newLon}&units=${this.state.units}&appid=${this.state.keys}`,\n                method: 'GET',\n                responseType: 'json'\n                })\n                .then((response) => { \n                    // Destructured\n                    const { daily, hourly } = response.data\n\n                    // Returned Data ...settingSate\n                    this.setState({\n                        weather: daily[0],\n                        currentTemp: (hourly[0].temp).toFixed(0),\n                        currentTempFeelLIke: (hourly[0].feels_like).toFixed(0),\n                        currentCond: daily[0].weather[0].description,\n                        weatherTomorrow: daily[1], // Stretch...\n                        weatherIn2Days: daily[2], // Stretch...\n                    })\n                    console.log(this.state.weather)\n                })\n        }\n    }     \n   \n\n\n    // Search Passed to SearchFor, from Input.js, using Props\n    searchFor = (e, searchReq) =>{\n        e.preventDefault();\n        // this.state.userInput !== ''\n        //     ? this.setState({ userInput: '' })\n        //     : alert(`Please enter Location`)\n        // console.log(searchReq);\n        this.setState({\n            newSearch: searchReq\n        },this.search);\n    }\n\n    // render is called on in MainPg.js\n    render() {   \n        return (\n            <>\n                <h3>\n                    <span className=\"visHidden\"></span>\n                    {this.state.currentTempFeelLIke}\n                    <span>°</span>\n                </h3>\n                <div className=\"conditionsContainer\">\n                    <img src={images[3].iSrc} alt={images[3].iAlt} className=\"wIcons\" />\n                    <h5><span>...</span> {this.state.currentCond}</h5>\n                </div>\n                \n                <section className=\"locationContainer\">\n                    <h2 className=\"selectedLocale\">\n                        {this.state.newSearch}\n                    </h2>\n                    <div className=\"inputContainer\">\n                        <InputField searchInput={this.searchFor}/>\n                    </div>\n                </section>\n            </>\n        )\n    }\n}\n\nexport default WeatherData;\n\n\n    // React handleSubmit()\n    // handleSubmit(e){\n    //     e.preventDefault()\n    //     alert('Button Click working')\n    // };\n\n    // render(){\n\n    //     return (\n    //         <div className=\"geoLocateLink\">\n    //             {/* Geo-location */}\n    //             {/* <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} /> */}\n    //             <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} />\n    //         </div>\n    //     )\n    // }","import React, { Component } from \"react\";\nimport InputField from \"./InputField\";\nimport GeoLocation from \"./GeoLocation\";\n\nclass LandingPg extends Component {\n\n    render() {\n        \n        return (\n             <div className=\"landingContainer\">\n                <h1>forecaster</h1>\n                <h2>a weather app</h2>\n                <InputField classname=\"lpInputs\"/>\n                <GeoLocation classname=\"lpGeoLocate\"/> \n             </div>             \n        )\n    }\n\n}\n\n\nexport default LandingPg;","import React, { Component } from \"react\";\n// import InputField from \"./InputField\";\nimport WeatherData from \"./WeatherData\";\nimport './App.scss';\n\nclass MainPg extends Component {\n\n    render(){\n\n\n        return(\n            <main className=\"mainContainer wrapper\">\n\n                <section className=\"header\">\n                    <h4>forecaster</h4>\n                </section>\n\n                <section className=\"dataContainer\">\n                    <WeatherData />\n                </section>\n                \n                {/* <section className=\"locationContainer\">\n                    <h2 className=\"selectedLocale\">\n                        Toronto \n\n                    </h2>\n                    <div className=\"inputContainer\">\n                        <InputField />\n                    </div>  \n                </section> */}\n            \n            </main>\n        )\n    }\n}\n\nexport default MainPg;","import React, { Component }from 'react';\n// Imports\nimport BackgroundElements from \"./BackgroundElements\";\nimport LandingPg from \"./LandingPg\";\nimport MainPg from \"./MainPg\";\n// Styling\nimport './App.scss';\n\n\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"background\">\n        <BackgroundElements />\n        {/* <LandingPg /> */}\n        <MainPg />\n      </div>\n    );\n\n  } \n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}