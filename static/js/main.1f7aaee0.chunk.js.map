{"version":3,"sources":["Assets/noun_Rain_1518109.svg","BackgroundElements.js","InputField.js","GeoLocation.js","LandingPg.js","weatherIcons.js","WeatherData.js","MainPg.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BackgroundElements","className","Component","InputField","handleUserInput","event","setState","userInput","target","value","handleSubmit","e","preventDefault","state","alert","onSubmit","this","type","id","placeholder","onChange","Geolocation","onClick","weatherIcons","iSRC","iCondition","iAlt","Rain","WeatherData","apiDataReturned","MainPg","src","alt","srcset","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,+C,mKCqB5BC,G,4KAbP,OAEI,yBAAKC,UAAU,2B,GALMC,cC+ClBC,E,kDAhDX,aAAc,IAAD,8BACT,gBAmBJC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CACVC,UAAWF,EAAMG,OAAOC,SAtBnB,EA4BbC,aAAe,SAACC,GAEZA,EAAEC,iBACuB,KAAzB,EAAKC,MAAMN,UAAmB,EAAKD,SAAS,CAAEC,UAAW,KAAQO,MAAM,0BA7BvE,EAAKD,MAAQ,CACTN,UAAW,IAHN,E,qDAoCT,OACQ,0BAAMQ,SAAUC,KAAKN,aAAcT,UAAU,iBAEzC,2BAAOgB,KAAK,OAAOC,GAAG,cAAcT,MAAOO,KAAKH,MAAMN,UAAWY,YAAY,sBAAsBlB,UAAU,cAAcmB,SAAUJ,KAAKZ,kBAE1I,2BAAOa,KAAK,SAASR,MAAM,SAASR,UAAU,qB,GA1CzCC,aCmCVmB,E,2KAhCEV,GACTA,EAAEC,iBACFE,MAAM,0B,+BAKN,OACI,yBAAKb,UAAU,iBAGX,2BAAOgB,KAAK,SAASR,MAAM,+BAA+BR,UAAU,+BAA+BqB,QAASN,KAAKN,oB,GAdvGR,a,GCCFA,Y,MCmBTqB,EArBM,CACjB,CACIC,KAAM,wBAEV,CACIC,WAAY,OACZC,KAAM,YACNF,K,OAAMG,GAEV,CACIF,WAAY,QACZC,KAAM,aACNF,KAAM,iCAEV,CACIC,WAAY,eACZC,KAAM,uBACNF,KAAM,sCCGCI,E,kDAlBX,aAAc,IAAD,8BACT,gBACKf,MAAQ,CACTgB,iBAAiB,GAHZ,E,qDAST,OACI,6BACKb,KAAKH,MAAMgB,gBAAkB,qDAAgC,U,GAZpD3B,aCqBX4B,E,uKAfP,OACI,6BACI,wCAEA,yBAAK7B,UAAU,gBACX,yBAAK8B,IAAKR,EAAa,GAAGC,KAAMQ,IAAI,GAAGC,OAAO,GAAGhC,UAAU,YAE/D,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAbKC,aCuBNgC,E,uKAbX,OACE,yBAAKjC,UAAU,cACb,kBAAC,EAAD,MAGA,kBAAC,EAAD,W,GATUC,aCCEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f7aaee0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noun_Rain_1518109.eb81db1a.svg\";","import React, { Component } from \"react\";\n\nimport './App.scss';\n\n\nclass BackgroundElements extends Component {\n\n    render(){\n        return (\n            \n            <div className=\"backgroundElements\">\n\n            </div>\n\n        )\n    }\n\n\n\n}\n\nexport default BackgroundElements;","import React, { Component } from \"react\";\n\n\nclass InputField extends Component {\n    constructor(){\n        super();\n        this.state = {\n            userInput: ''\n        }\n    }\n\n    // componentDidMount(){\n    //     axios({\n    //         url: '',\n    //         method: 'GET',\n    //         responseType: 'json',\n    //         params: {\n    //             key:\n    //         }\n\n    //     })\n    // }\n\n    // event.target.value ( what user is typing ) put it into the this.state.userInput\n    handleUserInput = (event) => {\n        this.setState({\n            userInput: event.target.value\n        })\n        // console.log(this.state.userInput)\n    }\n\n    // on submit, clears input field, error message if empty\n    handleSubmit = (e) => {\n        // console.log(this.state.userInput)\n        e.preventDefault();\n        this.state.userInput !== ''?  this.setState({ userInput: ''})  : alert(`Please enter Location`)\n    }\n\n    render(){ \n  \n        return(\n                <form onSubmit={this.handleSubmit} className=\"locateWSubmit\">\n                    {/* Input Field */}\n                    <input type=\"text\" id=\"locateInput\" value={this.state.userInput} placeholder=\"enter your location\" className=\"locateField\" onChange={this.handleUserInput}/> \n                    {/* Submit Button */}\n                    <input type=\"submit\" value=\"Submit\" className=\"locateField\"/>\n                </form>  \n        )\n    }\n\n}\n\nexport default InputField; ","import React, { Component } from 'react';\n\n\nclass Geolocation extends Component {\n\n    // React handleSubmit()\n    handleSubmit(e){\n        e.preventDefault()\n        alert('Button Click working')\n    };\n\n     render(){\n\n        return(\n            <div className=\"geoLocateLink\">\n                {/* Geo-location */}    \n                {/* <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} /> */}\n                <input type=\"button\" value=\"...use your current location\" className=\"locateField geoLocationField\" onClick={this.handleSubmit} />\n            </div>            \n        )\n     }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Geolocation;","import React, { Component } from \"react\";\nimport InputField from \"./InputField\";\nimport GeoLocation from \"./GeoLocation\";\n\nclass LandingPg extends Component {\n\n    render() {\n        \n        return (\n             <div className=\"App\">\n                  <h1>forecaster</h1>\n                  <h2>a weather app</h2>\n                  <InputField />\n                  <GeoLocation /> \n             </div>             \n        )\n    }\n\n}\n\n\nexport default LandingPg;","import Rain from './Assets/noun_Rain_1518109.svg';\n\nconst weatherIcons = [\n    {\n        iSRC: './Assets/home-6.jpeg'\n    },\n    {\n        iCondition: 'Rain',\n        iAlt: 'Rain Icon',\n        iSRC: Rain \n    },\n    {\n        iCondition: 'Cloud',\n        iAlt: 'Cloud Icon',\n        iSRC: 'Assets/noun_Cloud_1518102.svg'\n    },\n    {\n        iCondition: 'Cloud w Wind',\n        iAlt: 'Cloud with Wind Icon',\n        iSRC: 'Assets/noun_Wind_1518101_Blue.svg'\n    }\n]\n\nexport default weatherIcons;","import React, { Component } from \"react\";\n\n\nclass WeatherData extends Component {\n    constructor(){\n        super();\n        this.state = {\n            apiDataReturned: true\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.state.apiDataReturned ? <p>Weather data goes here</p> : null} \n            </div>\n        )\n    }\n\n}\n\nexport default WeatherData;","import React, { Component } from \"react\";\nimport InputField from \"./InputField\";\nimport weatherIcons from \"./weatherIcons\";\nimport WeatherData from \"./WeatherData\";\n\nclass MainPg extends Component {\n\n    render(){\n\n        return(\n            <div>\n                <h4>forecast</h4>\n\n                <div className=\"svgContainer\">\n                    <img src={weatherIcons[1].iSRC} alt=\"\" srcset=\"\" className=\"wIcons\"/>\n                </div>\n                <InputField />\n\n                <WeatherData />\n            </div>\n        )\n    }\n}\n\nexport default MainPg;","import React, { Component }from 'react';\n// Imports\nimport BackgroundElements from \"./BackgroundElements\";\nimport LandingPg from \"./LandingPg\";\nimport MainPg from \"./MainPg\";\n// Styling\nimport './App.scss';\n\n\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"background\">\n        <BackgroundElements />\n        {/* {this.state.weatherdata ? <LandingPg />: null} */}\n        {/* <LandingPg /> */}\n        <MainPg />\n      </div>\n    );\n\n  } \n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}